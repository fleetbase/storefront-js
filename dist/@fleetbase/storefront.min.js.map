{"version":3,"file":"storefront.min.js","sources":["../../src/resource.js","../../src/resources/review.js","../../src/utils/format-currency.js","../../src/utils/is-key-valid.js","../../src/utils/is-empty.js","../../src/resources/product.js","../../src/resources/category.js","../../src/resources/customer.js","../../src/utils/is-phone.js","../../src/resources/cart.js","../../src/resources/payment-gateway.js","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/toDate.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/constructFrom.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/addDays.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/constants.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/defaultOptions.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/startOfWeek.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/startOfISOWeek.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getISOWeekYear.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/startOfDay.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/isValid.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/isDate.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/_lib/buildMatchFn.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/en-US.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/en-US/_lib/localize.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/locale/en-US/_lib/match.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getDayOfYear.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/differenceInCalendarDays.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/startOfYear.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getISOWeek.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/startOfISOWeekYear.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getWeekYear.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getWeek.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/startOfWeekYear.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/addLeadingZeros.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/format/lightFormatters.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/format/formatters.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/format/longFormatters.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/_lib/protectedTokens.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/format.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/Setter.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/transpose.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/Parser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/constants.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/utils.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/DateParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/setDay.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/setISODay.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getISODay.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/EraParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/YearParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/setWeek.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/setISOWeek.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/DayParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/LocalDayParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/ISODayParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/AMPMParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/MinuteParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/SecondParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/parse.mjs","../../node_modules/.pnpm/date-fns@3.0.5/node_modules/date-fns/getDefaultOptions.mjs","../../src/resources/store-hour.js","../../src/resources/store-location.js","../../src/resources/store.js","../../src/resources/network.js","../../src/resources/delivery-service-quote.js","../../src/resources/checkout.js","../../src/resolver.js","../../src/store.js","../../src/storefront.js","../../src/utils/detect-adapter.js"],"sourcesContent":["import { Resource } from '@fleetbase/sdk';\nimport StorefrontStore from './store';\n\nexport default class StorefrontResource extends Resource {\n    /**\n     * Set a new adapter to the resource instance, this will update the Store instance\n     *\n     * @param {Adapter} adapter\n     * @return {Resource} this\n     */\n    setAdapter(adapter) {\n        this.adapter = adapter;\n        this.store = new StorefrontStore(this.resource, adapter, {\n            onAfterFetch: this.syncAttributes.bind(this),\n            actions: this.options?.actions,\n        });\n\n        return this;\n    }\n}\n","import Resource from '../resource';\nimport { StoreActions } from '@fleetbase/sdk';\n\nconst reviewActions = new StoreActions({\n    count: function (storeId, options = {}) {\n        const params = {};\n\n        if (storeId) {\n            params.store = storeId;\n        }\n\n        return this.adapter.get(`${this.namespace}/count`, params, options);\n    },\n});\n\nexport default class Review extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'review', options);\n    }\n\n    getMedia() {\n        // @todo\n    }\n\n    getPhotos() {\n        // @todo\n    }\n\n    getVideos() {\n        // @todo\n    }\n}\n\nexport { reviewActions };\n","export default function formatCurrency(amount = 0, currency = 'USD', currencyDisplay = 'symbol') {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency,\n        currencyDisplay,\n    }).format(amount);\n}\n","const isKeyValid = (key) => {\n    return typeof key === 'string' && key.length > 30 && (key.startsWith('store_') || key.startsWith('network_'));\n};\n\nexport default isKeyValid;\n","const isEmpty = (obj) => {\n    const none = obj === null || obj === undefined;\n    if (none) {\n        return none;\n    }\n\n    if (typeof obj.size === 'number') {\n        return !obj.size;\n    }\n\n    const objectType = typeof obj;\n\n    if (objectType === 'object') {\n        const { size } = obj;\n        if (typeof size === 'number') {\n            return !size;\n        }\n    }\n\n    if (typeof obj.length === 'number' && objectType !== 'function') {\n        return !obj.length;\n    }\n\n    if (objectType === 'object') {\n        const { length } = obj;\n        if (typeof length === 'number') {\n            return !length;\n        }\n    }\n\n    return false;\n};\n\nexport default isEmpty;\n","import Resource from '../resource';\nimport Review from './review';\nimport { formatCurrency, isEmpty } from '../utils';\nimport { Collection } from '@fleetbase/sdk';\n\nexport default class Product extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'product', options);\n    }\n\n    variants() {\n        return this.getAttribute('variants');\n    }\n\n    addons() {\n        return this.getAttribute('addon_categories');\n    }\n\n    get isOnSale() {\n        return this.getAttribute('is_on_sale');\n    }\n\n    get isNotOnSale() {\n        return !this.getAttribute('is_on_sale');\n    }\n\n    get formattedAmount() {\n        const { price, sale_price, currency } = this.getAttributes(['price', 'sale_price', 'currency']);\n\n        if (this.isOnSale) {\n            if (isEmpty(sale_price) || isEmpty(currency)) {\n                return null;\n            }\n\n            return formatCurrency(sale_price / 100, currency);\n        }\n\n        if (isEmpty(price) || isEmpty(currency)) {\n            return null;\n        }\n\n        return formatCurrency(price / 100, currency);\n    }\n\n    getReviews() {\n        return this.adapter.get('reviews', { store: this.id }).then((reviews) => {\n            return new Collection(reviews.map((attributes) => new Review(attributes, this.adapter)));\n        });\n    }\n}\n","import Resource from '../resource';\nimport Product from './product';\nimport { Collection } from '@fleetbase/sdk';\n\nexport default class Category extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'category', options);\n    }\n\n    getProducts() {\n        return this.adapter.get('products', { category: this.id }).then((products) => {\n            return new Collection(products.map((attributes) => new Product(attributes, this.adapter)));\n        });\n    }\n}\n","import { Collection, Order, Place, StoreActions } from '@fleetbase/sdk';\nimport Resource from '../resource';\nimport StorefrontStore from '../store';\nimport { isPhone } from '../utils';\n\nconst customerActions = new StoreActions({\n    // const { error } = await storefront.customers.login('+1 111-1111');\n    login: function (identity, password = null, attributes = {}) {\n        // handle phone number authentication\n        if (isPhone(identity)) {\n            return this.adapter.post('customers/login-with-sms', { phone: identity });\n        }\n\n        if (!password) {\n            throw new Error('Login requires password!');\n        }\n\n        return this.adapter.post('customers/login', { identity, password, ...attributes }).then(this.afterFetch.bind(this));\n    },\n\n    verifyCode: function (identity, code, attributes = {}) {\n        return this.adapter.post('customers/verify-code', { identity, code, ...attributes }).then(this.afterFetch.bind(this));\n    },\n\n    requestCreationCode(identity, mode = 'email') {\n        return this.adapter.post('customers/request-creation-code', {\n            identity,\n            mode,\n        });\n    },\n\n    create(identity, code, attributes = {}) {\n        return this.adapter.post('customers', { identity, code, ...attributes }).then(this.afterFetch.bind(this));\n    },\n\n    retrieve: function (id) {\n        return this.findRecord(id);\n    },\n});\n\nexport default class Customer extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'customer', {\n            actions: customerActions,\n            ...options,\n        });\n    }\n\n    /**\n     * Set a new adapter to the resource instance, this will update the Store instance\n     *\n     * @param {Adapter} adapter\n     * @return {Resource} this\n     */\n    setAdapter(adapter) {\n        this.adapter = adapter;\n        this.store = new StorefrontStore(this.resource, adapter, {\n            onAfterFetch: this.syncAttributes.bind(this),\n            actions: this.options?.actions,\n        });\n\n        return this;\n    }\n\n    get token() {\n        return this.getAttribute('token');\n    }\n\n    async syncDevice(token) {\n        return this.adapter\n            .setHeaders({ 'Customer-Token': this.token })\n            .post('customers/register-device', token)\n            .then(() => {\n                return this;\n            });\n    }\n\n    async performAuthorizedRequest(endpoint, params = {}, method = 'GET') {\n        try {\n            const headers = { 'Customer-Token': this.token };\n            const response = await this.adapter.setHeaders(headers)[method.toLowerCase()](endpoint, params);\n            return response;\n        } catch (error) {\n            console.error(`Error in ${method} request to ${endpoint}:`, error);\n            throw error;\n        }\n    }\n\n    async getSavedPlaces() {\n        try {\n            const places = await this.performAuthorizedRequest('customers/places');\n            return new Collection(places.map((attributes) => new Place(attributes, this.adapter)));\n        } catch (error) {\n            throw new Error('Failed to retrieve saved places');\n        }\n    }\n\n    async getOrderHistory(params = {}) {\n        try {\n            const orders = await this.performAuthorizedRequest('customers/orders', params);\n            return new Collection(orders.map((attributes) => new Order(attributes, this.adapter)));\n        } catch (error) {\n            throw new Error('Failed to retrieve order history');\n        }\n    }\n}\n\nexport { customerActions };\n","const isPhone = (phone = '') => {\n    return /^[+]?[\\s./0-9]*[(]?[0-9]{1,4}[)]?[-\\s./0-9]*$/g.test(phone);\n};\n\nexport default isPhone;\n","import Resource from '../resource';\nimport Product from './product';\nimport { StoreActions } from '@fleetbase/sdk';\n\nconst { isArray } = Array;\n\nconst cartActions = new StoreActions({\n    create: undefined,\n    findAll: undefined,\n    query: undefined,\n    queryRecord: undefined,\n\n    add: function (id, productId, quantity = 1, data = {}, options = {}) {\n        return this.adapter.post(`${this.namespace}/${id}/${productId}`, { ...data, quantity }, options).then(this.afterFetch.bind(this));\n    },\n\n    update: function (id, cartItemId, quantity, data = {}, options = {}) {\n        return this.adapter.put(`${this.namespace}/${id}/${cartItemId}`, { ...data, quantity }, options).then(this.afterFetch.bind(this));\n    },\n\n    remove: function (id, cartItemId, options = {}) {\n        return this.adapter.delete(`${this.namespace}/${id}/${cartItemId}`, {}, options).then(this.afterFetch.bind(this));\n    },\n\n    empty: function (id, options = {}) {\n        return this.adapter.put(`${this.namespace}/${id}/empty`, {}, options).then(this.afterFetch.bind(this));\n    },\n\n    retrieve: function (id = '') {\n        return this.findRecord(id);\n    },\n});\n\nexport default class Cart extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'cart', { actions: cartActions, ...options });\n    }\n\n    add(productId, quantity = 1, data = {}, options = {}) {\n        if (productId instanceof Product) {\n            productId = productId.id;\n        }\n\n        return this.store.add(this.id, productId, quantity, data, options);\n    }\n\n    update(cartItemId, quantity, data = {}, options = {}) {\n        return this.store.update(this.id, cartItemId, quantity, data, options);\n    }\n\n    remove(cartItemId, options = {}) {\n        return this.store.remove(this.id, cartItemId, options);\n    }\n\n    empty(options = {}) {\n        return this.store.empty(this.id, options);\n    }\n\n    delete() {\n        return this.destroy();\n    }\n\n    refresh() {\n        return this.store.retrieve(this.id);\n    }\n\n    subtotal() {\n        let subtotal = 0;\n\n        this.contents().forEach((cartItem) => {\n            subtotal += cartItem.subtotal;\n        });\n\n        return subtotal;\n    }\n\n    contents() {\n        return this.getAttribute('items', []);\n    }\n\n    hasProduct(productId) {\n        return this.contents().findIndex((cartItem) => cartItem.product_id === productId) !== -1;\n    }\n\n    get isEmpty() {\n        const contents = this.contents();\n\n        if (!isArray(contents)) {\n            return true;\n        }\n\n        return contents.length === 0;\n    }\n\n    get isNotEmpty() {\n        return !this.isEmpty;\n    }\n}\n\nexport { cartActions };\n","import Resource from '../resource';\n\nexport default class PaymentGateway extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'payment-gateway', options);\n    }\n\n    get type() {\n        return this.getAttribute('type');\n    }\n\n    get code() {\n        return this.getAttribute('code');\n    }\n\n    get isCashGateway() {\n        return this.type === 'cash';\n    }\n\n    get isStripeGateway() {\n        return this.type === 'stripe';\n    }\n\n    setCheckoutToken(token) {\n        this.token = token;\n    }\n\n    getCheckoutToken() {\n        return this.token;\n    }\n\n    // remove default resource methods\n    findRecord() {\n        throw new Error('There is no findRecord() method for payment gateways!');\n    }\n\n    // remove default resource methods\n    create() {\n        throw new Error('There is no create() method for payment gateways!');\n    }\n\n    // remove default resource methods\n    update() {\n        throw new Error('There is no update() method for payment gateways!');\n    }\n\n    // remove default resource methods\n    destroy() {\n        throw new Error('There is no destroy() method for payment gateways!');\n    }\n\n    // remove default resource methods\n    reload() {\n        throw new Error('There is no reload() method for payment gateways!');\n    }\n}\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const utcDate = new Date(\n    Date.UTC(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      date.getHours(),\n      date.getMinutes(),\n      date.getSeconds(),\n      date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    startOfDayRight.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff =\n    startOfISOWeek(_date).getTime() - startOfISOWeekYear(_date).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff =\n    startOfWeek(_date, options).getTime() -\n    startOfWeekYear(_date, options).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.floor(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    const originalDate = options._originalDate || date;\n    const timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    const originalDate = options._originalDate || date;\n    const timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    const originalDate = options._originalDate || date;\n    const timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    const originalDate = options._originalDate || date;\n    const timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    const originalDate = options._originalDate || date;\n    const timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    const originalDate = options._originalDate || date;\n    const timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.floor(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const protectedDayOfYearTokens = [\"D\", \"DD\"];\nconst protectedWeekYearTokens = [\"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\n\nexport function throwProtectedError(token, format, input) {\n  if (token === \"YYYY\") {\n    throw new RangeError(\n      `Use \\`yyyy\\` instead of \\`YYYY\\` (in \\`${format}\\`) for formatting years to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`,\n    );\n  } else if (token === \"YY\") {\n    throw new RangeError(\n      `Use \\`yy\\` instead of \\`YY\\` (in \\`${format}\\`) for formatting years to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`,\n    );\n  } else if (token === \"D\") {\n    throw new RangeError(\n      `Use \\`d\\` instead of \\`D\\` (in \\`${format}\\`) for formatting days of the month to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`,\n    );\n  } else if (token === \"DD\") {\n    throw new RangeError(\n      `Use \\`dd\\` instead of \\`DD\\` (in \\`${format}\\`) for formatting days of the month to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`,\n    );\n  }\n}\n","import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  throwProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate,\n  };\n\n  const result = formatStr\n    .match(longFormattingTokensRegExp)\n    .map(function (substring) {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map(function (substring) {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n\n      const formatter = formatters[firstCharacter];\n      if (formatter) {\n        if (\n          !options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(substring)\n        ) {\n          throwProtectedError(substring, formatStr, String(date));\n        }\n        if (\n          !options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(substring)\n        ) {\n          throwProtectedError(substring, formatStr, String(date));\n        }\n        return formatter(\n          originalDate,\n          substring,\n          locale.localize,\n          formatterOptions,\n        );\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return substring;\n    })\n    .join(\"\");\n\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { transpose } from \"../../transpose.mjs\";\nimport { constructFrom } from \"../../constructFrom.mjs\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateToSystemTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, Date));\n  }\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam DateInputType - The input `Date` type derived from the passed argument.\n * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.\n *\n * @param fromDate - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(fromDate, constructor) {\n  const date =\n    constructor instanceof Date\n      ? constructFrom(constructor, 0)\n      : new constructor(0);\n  date.setFullYear(\n    fromDate.getFullYear(),\n    fromDate.getMonth(),\n    fromDate.getDate(),\n  );\n  date.setHours(\n    fromDate.getHours(),\n    fromDate.getMinutes(),\n    fromDate.getSeconds(),\n    fromDate.getMilliseconds(),\n  );\n  return date;\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { ValueSetter } from \"./Setter.mjs\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.mjs\";\nimport { numericPatterns } from \"./constants.mjs\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { addDays } from \"./addDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const currentDay = _date.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { addDays } from \"./addDays.mjs\";\nimport { getISODay } from \"./getISODay.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day) {\n  const _date = toDate(date);\n  const currentDay = getISODay(_date);\n  const diff = day - currentDay;\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date) {\n  const _date = toDate(date);\n  let day = _date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { EraParser } from \"./parsers/EraParser.mjs\";\nimport { YearParser } from \"./parsers/YearParser.mjs\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.mjs\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.mjs\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.mjs\";\nimport { QuarterParser } from \"./parsers/QuarterParser.mjs\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.mjs\";\nimport { MonthParser } from \"./parsers/MonthParser.mjs\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.mjs\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.mjs\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.mjs\";\nimport { DateParser } from \"./parsers/DateParser.mjs\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.mjs\";\nimport { DayParser } from \"./parsers/DayParser.mjs\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.mjs\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.mjs\";\nimport { ISODayParser } from \"./parsers/ISODayParser.mjs\";\nimport { AMPMParser } from \"./parsers/AMPMParser.mjs\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.mjs\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.mjs\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.mjs\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.mjs\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.mjs\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.mjs\";\nimport { MinuteParser } from \"./parsers/MinuteParser.mjs\";\nimport { SecondParser } from \"./parsers/SecondParser.mjs\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.mjs\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.mjs\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.mjs\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.mjs\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- It's ok, we want any here\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.mjs\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.mjs\";\nimport { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigitsSigned } from \"../utils.mjs\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigitsSigned } from \"../utils.mjs\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const _date = toDate(date);\n  const diff = getWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setISOWeek } from \"../../../setISOWeek.mjs\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.mjs\";\nimport { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week) {\n  const _date = toDate(date);\n  const diff = getISOWeek(_date) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.floor(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseAnyDigitsSigned } from \"../utils.mjs\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseAnyDigitsSigned } from \"../utils.mjs\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getDefaultOptions } from \"./getDefaultOptions.mjs\";\nimport { enUS as defaultLocale } from \"./locale/en-US.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  throwProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { parsers } from \"./parse/_lib/parsers.mjs\";\nimport { DateToSystemTimezoneSetter } from \"./parse/_lib/Setter.mjs\";\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (formatStr === \"\") {\n    if (dateStr === \"\") {\n      return toDate(referenceDate);\n    } else {\n      return constructFrom(referenceDate, NaN);\n    }\n  }\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will be set to the system timezone\n  const setters = [new DateToSystemTimezoneSetter()];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      throwProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      throwProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return constructFrom(referenceDate, NaN);\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return constructFrom(referenceDate, NaN);\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return constructFrom(referenceDate, NaN);\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate);\n\n  if (isNaN(date.getTime())) {\n    return constructFrom(referenceDate, NaN);\n  }\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return constructFrom(referenceDate, NaN);\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return constructFrom(referenceDate, date);\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import Resource from '../resource';\nimport { format, parse, isValid } from 'date-fns';\n\nexport default class StoreHour extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'store-hour', options);\n    }\n\n    get day() {\n        return this.getAttribute('day');\n    }\n\n    get isClosed() {\n        return this.getAttribute('start') === null && this.getAttribute('end') === null;\n    }\n\n    get is24Hours() {\n        const start = this.startDateInstance;\n        const end = this.endDateInstance;\n        const diff = Math.abs(start - end);\n        const hours = Math.floor(diff / 1000 / 60) / 60;\n\n        return hours > 23;\n    }\n\n    get startDateInstance() {\n        if (!this.hasAttribute('start')) {\n            return null;\n        }\n\n        const start = this.getAttribute('start');\n        const includesSeconds = start.split(':').length === 3;\n        const format = includesSeconds ? 'HH:mm:ss' : 'HH:mm';\n\n        return parse(start, format, new Date());\n    }\n\n    get endDateInstance() {\n        if (!this.hasAttribute('end')) {\n            return null;\n        }\n\n        const end = this.getAttribute('end');\n        const includesSeconds = end.split(':').length === 3;\n        const format = includesSeconds ? 'HH:mm:ss' : 'HH:mm';\n\n        return parse(end, format, new Date());\n    }\n\n    get humanReadableHoursRange() {\n        if (!isValid(this.startDateInstance) || !isValid(this.endDateInstance)) {\n            return `${this.start} - ${this.end}`;\n        }\n\n        return `${format(this.startDateInstance, 'p')} - ${format(this.endDateInstance, 'p')}`;\n    }\n\n    get humanReadableHours() {\n        if (this.isClosed) {\n            return 'Closed';\n        }\n\n        if (this.is24Hours) {\n            return '24 Hours';\n        }\n\n        return this.humanReadableHoursRange;\n    }\n\n    // remove default resource methods\n    create() {\n        throw new Error('There is no create() method store location!');\n    }\n\n    // remove default resource methods\n    update() {\n        throw new Error('There is no update() method store location!');\n    }\n\n    // remove default resource methods\n    destroy() {\n        throw new Error('There is no destroy() method store location!');\n    }\n\n    // remove default resource methods\n    reload() {\n        throw new Error('There is no reload() method store location!');\n    }\n}\n","import Resource from '../resource';\nimport StoreHour from './store-hour';\nimport { Collection } from '@fleetbase/sdk';\nimport { format } from 'date-fns';\n\nexport default class StoreLocation extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'store-location', options);\n    }\n\n    get latitude() {\n        return this.getAttribute('place.location.coordinates.1');\n    }\n\n    get longitude() {\n        return this.getAttribute('place.location.coordinates.0');\n    }\n\n    get hours() {\n        return new Collection(this.getAttribute('hours').map((attributes) => new StoreHour(attributes)));\n    }\n\n    get isAlwaysOpen() {\n        return this.hours.every((hour) => hour?.is24Hours);\n    }\n\n    get today() {\n        const today = format(new Date(), 'EEEE');\n\n        return this.schedule[today];\n    }\n\n    get schedule() {\n        const schedule = {};\n        const week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n        for (let i = 0; i < week.length; i++) {\n            const day = week[i];\n\n            schedule[day] = new Collection();\n        }\n\n        for (let i = 0; i < this.hours.length; i++) {\n            const hour = this.hours.objectAt(i);\n\n            schedule[hour.day].pushObject(hour);\n        }\n\n        return schedule;\n    }\n\n    // remove default resource methods\n    create() {\n        throw new Error('There is no create() method store location!');\n    }\n\n    // remove default resource methods\n    update() {\n        throw new Error('There is no update() method store location!');\n    }\n\n    // remove default resource methods\n    destroy() {\n        throw new Error('There is no destroy() method store location!');\n    }\n}\n","import Resource from '../resource';\nimport StoreLocation from './store-location';\nimport PaymentGateway from './payment-gateway';\nimport Review from './review';\nimport { Collection, Place } from '@fleetbase/sdk';\n\nexport default class Store extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'store', options);\n    }\n\n    getReviews(params = {}) {\n        return this.adapter.get('reviews', { store: this.id, ...params }).then((reviews) => {\n            return new Collection(reviews.map((attributes) => new Review(attributes, this.adapter)));\n        });\n    }\n\n    getLocations(params = {}) {\n        return this.adapter.get('locations', { store: this.id, ...params }).then((storeLocations) => {\n            return new Collection(\n                storeLocations.map((attributes) => {\n                    if (attributes.place) {\n                        attributes.place = new Place(attributes.place);\n                    }\n\n                    return new StoreLocation(attributes, this.adapter);\n                })\n            );\n        });\n    }\n\n    getLocation(id) {\n        return this.adapter.get(`locations/${id}`, { store: this.id }).then((attributes) => {\n            return new StoreLocation(attributes, this.adapter);\n        });\n    }\n\n    getPaymentGateways(params = {}) {\n        return this.adapter.get('gateways', params).then((gateways) => {\n            return new Collection(\n                gateways.map((attributes) => {\n                    return new PaymentGateway(attributes, this.adapter);\n                })\n            );\n        });\n    }\n\n    getPaymentGateway(id) {\n        return this.adapter.get(`gateways/${id}`).then((attributes) => {\n            return new PaymentGateway(attributes, this.adapter);\n        });\n    }\n}\n","import { Collection } from '@fleetbase/sdk';\nimport Resource from '../resource';\nimport PaymentGateway from './payment-gateway';\nimport Store from './store';\nimport StoreLocation from './store-location';\n\nexport default class Network extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'network', options);\n    }\n\n    getTags(params = {}) {\n        return this.adapter.get('tags', params);\n    }\n\n    async getResourceCollection(endpoint, ResourceClass, params = {}) {\n        try {\n            const resources = await this.adapter.get(endpoint, params);\n            return new Collection(resources.map((attributes) => new ResourceClass(attributes, this.adapter)));\n        } catch (error) {\n            console.error(`Error fetching ${endpoint}:`, error);\n            throw error;\n        }\n    }\n\n    async getStores(params = {}) {\n        return this.getResourceCollection('stores', Store, params);\n    }\n\n    async getStoreLocations(params = {}) {\n        return this.getResourceCollection('store-locations', StoreLocation, params);\n    }\n\n    async getPaymentGateways() {\n        return this.getResourceCollection('gateways', PaymentGateway);\n    }\n}\n","import { Adapter, Collection, ServiceQuote } from '@fleetbase/sdk';\nimport StorefrontStore from '../store';\nimport { formatCurrency, isEmpty } from '../utils';\n\nconst { isArray } = Array;\n\nexport default class DeliveryServiceQuote extends ServiceQuote {\n    constructor(attributes = {}, adapter, options = {}) {\n        if (attributes instanceof Adapter) {\n            return super({}, attributes, 'service-quote', options);\n        }\n\n        super(attributes, adapter, 'service-quote', options);\n    }\n\n    /**\n     * Set a new adapter to the resource instance, this will update the Store instance\n     *\n     * @param {Adapter} adapter\n     * @return {Resource} this\n     */\n    setAdapter(adapter) {\n        this.adapter = adapter;\n        this.store = new StorefrontStore(this.resource, adapter, {\n            onAfterFetch: this.syncAttributes.bind(this),\n            actions: this.options?.actions,\n        });\n\n        return this;\n    }\n\n    get formattedAmount() {\n        const { amount, currency } = this.getAttributes(['amount', 'currency']);\n\n        if (isEmpty(amount) || isEmpty(currency)) {\n            return null;\n        }\n\n        return formatCurrency(amount / 100, currency);\n    }\n\n    async fetchServiceQuotesFromCart(origin, destination, cart, config = 'storefront', all = false) {\n        if (origin?.id) {\n            origin = origin.id;\n        }\n        if (destination?.id) {\n            destination = destination.id;\n        }\n        if (cart?.id) {\n            cart = cart.id;\n        }\n\n        try {\n            const serviceQuotes = await this.adapter.get('service-quotes/from-cart', {\n                origin,\n                destination,\n                cart,\n                config,\n                all,\n            });\n\n            if (isArray(serviceQuotes)) {\n                return new Collection(serviceQuotes.map((serviceQuote) => new DeliveryServiceQuote(serviceQuote, this.adapter)));\n            }\n\n            return new DeliveryServiceQuote(serviceQuotes, this.adapter);\n        } catch (error) {\n            console.error('Error fetching service quotes:', error);\n            throw error;\n        }\n    }\n\n    static async getFromCart(adapter, origin, destination, cart, config = 'storefront', all = false) {\n        const quote = new DeliveryServiceQuote(adapter);\n        return quote.fetchServiceQuotesFromCart(origin, destination, cart, config, all);\n    }\n}\n","import { Order, StoreActions, isResource } from '@fleetbase/sdk';\nimport Resource from '../resource';\n\nconst checkoutActions = new StoreActions({\n    create: undefined,\n    findAll: undefined,\n    query: undefined,\n    queryRecord: undefined,\n\n    initialize: function (customer, cart, serviceQuote, gateway, orderOptions = {}, options = {}) {\n        if (isResource(customer)) {\n            customer = customer.id;\n        }\n\n        if (isResource(cart)) {\n            cart = cart.id;\n        }\n\n        if (isResource(serviceQuote)) {\n            serviceQuote = serviceQuote.id;\n        }\n\n        if (isResource(gateway)) {\n            gateway = gateway.getAttribute('code');\n        }\n\n        return this.adapter.get(`${this.namespace}/before`, { ...orderOptions, customer, cart, serviceQuote, gateway }, options);\n    },\n\n    captureOrder: function (token, transactionDetails = {}, options = {}) {\n        return this.adapter.get(`${this.namespace}/capture`, { token, transactionDetails }, options).then((orderJson) => new Order(orderJson));\n    },\n});\n\nexport default class Checkout extends Resource {\n    constructor(attributes = {}, adapter, options = {}) {\n        super(attributes, adapter, 'checkout', options);\n    }\n\n    initialize() {\n        return this.store.initialize(...arguments);\n    }\n\n    captureOrder() {\n        return this.store.captureOrder(...arguments);\n    }\n}\n\nexport { checkoutActions };\n","import { Product, Category, Customer, Cart, DeliveryServiceQuote, Store, StoreLocation, StoreHour, Checkout, Review } from './resources';\nimport { BrowserAdapter, NodeAdapter, pluralize, singularize } from '@fleetbase/sdk';\n\nconst resources = {\n    Product,\n    Category,\n    Customer,\n    Cart,\n    DeliveryServiceQuote,\n    Store,\n    StoreLocation,\n    StoreHour,\n    Checkout,\n    Review,\n};\n\nconst adapters = {\n    BrowserAdapter,\n    NodeAdapter,\n};\n\nclass Resolver {\n    constructor() {\n        this.resources = resources;\n        this.adapters = adapters;\n\n        return this.lookup(...arguments);\n    }\n\n    lookup(type, className) {\n        const key = pluralize(type);\n        const params = [...arguments].slice(2);\n\n        if (!this[key]) {\n            throw new Error('Attempted to resolve invalid type');\n        }\n\n        if (!this[key][className]) {\n            throw new Error(`No ${singularize(type)} named ${className} to resolve`);\n        }\n\n        return new this[key][className](...params);\n    }\n}\n\nconst lookup = function () {\n    return new Resolver(...arguments);\n};\n\nexport { Resolver, lookup };\n","import { Store, classify, extendStoreActions } from '@fleetbase/sdk';\nimport { lookup } from './resolver';\n\nexport default class StorefrontStore extends Store {\n    constructor() {\n        super(...arguments);\n    }\n\n    extendActions(actions = []) {\n        return extendStoreActions(this, actions);\n    }\n\n    serialize(json) {\n        return lookup('resource', classify(this.resource), json, this.adapter);\n    }\n}\n","import StorefrontStore from './store';\nimport { detectAdapter, isKeyValid } from './utils';\nimport { Product, Category, Customer, Cart, Store, StoreLocation, StoreHour, DeliveryServiceQuote, Checkout, PaymentGateway, Review, Network } from './resources';\nimport { cartActions } from './resources/cart';\nimport { customerActions } from './resources/customer';\nimport { checkoutActions } from './resources/checkout';\nimport { reviewActions } from './resources/review';\nimport { Collection } from '@fleetbase/sdk';\n\n/**\n * // instance\n * const storefront = new Storefront();\n *\n */\n\nexport default class Storefront {\n    /**\n     * Builds an instance of the Fleetbase Storefront SDK\n     *\n     * @param  {String} storeKey  The access key for the storefront store\n     * @param  {Object} config    The config object\n     * @param  {Boolean} debug    Enable debug mode\n     * @return {Storefront}        Instance\n     */\n    constructor(storeKey, config = {}, debug = false) {\n        this.version = config.version || 'v1';\n        this.options = {\n            version: this.version,\n            host: config.host || 'https://api.fleetbase.io',\n            namespace: `storefront/${this.version}` || config.namespace,\n            publicKey: storeKey,\n            debug,\n        };\n\n        if (!isKeyValid(storeKey)) {\n            throw new Error('⚠️ Invalid Storefront key given to Storefront SDK');\n        }\n\n        this.adapter = config.adapter || detectAdapter(this.options);\n\n        this.products = new StorefrontStore('product', this.adapter);\n        this.categories = new StorefrontStore('category', this.adapter);\n        this.reviews = new StorefrontStore('review', this.adapter).extendActions(reviewActions);\n        this.customers = new StorefrontStore('customer', this.adapter).extendActions(customerActions);\n        this.cart = new StorefrontStore('cart', this.adapter).extendActions(cartActions);\n        this.checkout = new StorefrontStore('checkout', this.adapter).extendActions(checkoutActions);\n    }\n\n    /** loads information about this storefront */\n    about() {\n        return this.adapter.get('about');\n    }\n\n    /** search products in store or network */\n    search(query, options = {}) {\n        return this.adapter.get('search', { query, ...options }).then((products) => {\n            return new Collection(products.map((product) => new Product(product)));\n        });\n    }\n\n    static newInstance() {\n        return new Storefront(...arguments);\n    }\n\n    setAdapter(adapter) {\n        this.adapter = adapter;\n    }\n\n    getAdapter() {\n        return this.adapter;\n    }\n}\n\nexport { Product, Category, Customer, Cart, Store, StoreLocation, StoreHour, DeliveryServiceQuote, Checkout, PaymentGateway, Review, Network };\n","import { lookup } from '../resolver';\nimport { isNodeEnvironment } from '@fleetbase/sdk';\n\nconst detectAdapter = (options = {}) => {\n    if (isNodeEnvironment()) {\n        return lookup('adapter', 'NodeAdapter', options);\n    }\n\n    return lookup('adapter', 'BrowserAdapter', options);\n};\n\nexport default detectAdapter;\n"],"names":["StorefrontResource","_Resource","_inherits","_super","_createSuper","_classCallCheck","apply","this","arguments","_createClass","key","value","adapter","_this$options","store","StorefrontStore","resource","onAfterFetch","syncAttributes","bind","actions","options","Resource","reviewActions","StoreActions","count","storeId","length","undefined","params","get","concat","namespace","Review","attributes","call","formatCurrency","amount","currency","currencyDisplay","Intl","NumberFormat","style","format","isEmpty","obj","none","size","objectType","_typeof","Product","getAttribute","_this$getAttributes","getAttributes","price","sale_price","isOnSale","_this","id","then","reviews","Collection","map","Category","category","products","customerActions","login","identity","password","test","isPhone","post","phone","Error","_objectSpread","afterFetch","verifyCode","code","requestCreationCode","mode","create","retrieve","findRecord","Customer","_getOrderHistory","_getSavedPlaces","_performAuthorizedRequest","_syncDevice","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","wrap","_context","prev","next","abrupt","setHeaders","stop","_x","_callee2","endpoint","method","headers","response","_args2","_context2","toLowerCase","sent","t0","console","error","_x2","_callee3","places","_this2","_context3","performAuthorizedRequest","Place","_callee4","orders","_this3","_args4","_context4","Order","isArray","Array","cartActions","findAll","query","queryRecord","add","productId","quantity","data","update","cartItemId","put","remove","empty","Cart","destroy","subtotal","contents","forEach","cartItem","findIndex","product_id","PaymentGateway","type","toDate","argument","argStr","Object","prototype","toString","Date","constructor","NaN","constructFrom","date","addDays","_date","isNaN","setDate","getDate","millisecondsInWeek","millisecondsInDay","defaultOptions","getDefaultOptions","startOfWeek","weekStartsOn","locale","day","getDay","diff","setHours","startOfISOWeek","getISOWeekYear","year","getFullYear","fourthOfJanuaryOfNextYear","setFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","startOfDay","getTimezoneOffsetInMilliseconds","utcDate","UTC","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","isValid","Number","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","width","String","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","array","predicate","pattern","object","hasOwnProperty","findKey","valueCallback","rest","slice","enUS","formatDistance","result","tokenValue","replace","addSuffix","comparison","formatRelative","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","rem100","era","narrow","abbreviated","wide","quarter","month","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","firstWeekContainsDate","getDayOfYear","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","Math","round","differenceInCalendarDays","cleanDate","startOfYear","getISOWeek","fourthOfJanuary","startOfISOWeekYear","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","getWeek","firstWeek","startOfWeekYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","y","signedYear","M","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","floor","pow","dayPeriodEnum","formatters","G","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","b","hours","B","K","k","X","_localize","timezoneOffset","_originalDate","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","originalDate","T","offset","delimiter","sign","absOffset","minutes","dateLongFormatter","timeLongFormatter","longFormatters","p","P","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","input","RangeError","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","defaultLocale","formatterOptions","substring","firstCharacter","longFormatter","join","matched","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","Setter","subPriority","validate","_utcDate","ValueSetter","validateValue","setValue","priority","super","set","flags","DateToSystemTimezoneSetter","timestampIsSet","fromDate","transpose","Parser","run","dateString","parse","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","isLeapYearIndex","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","setDay","currentDay","delta","setISODay","getISODay","parsers","incompatibleTokens","isTwoDigitYear","normalizedTwoDigitYear","_flags","firstWeekOfYear","setMonth","setWeek","setISOWeek","isLeapYear","subpriority","wholeWeekDays","isPM","setMinutes","setSeconds","setMilliseconds","notWhitespaceRegExp","dateStr","referenceDate","assign","getInternalDefaultOptions","subFnOptions","setters","tokens","usedTokens","parser","incompatibleToken","find","usedToken","includes","fullToken","push","uniquePrioritySetters","sort","filter","setterArray","StoreHour","start","startDateInstance","end","endDateInstance","hasAttribute","includesSeconds","split","isClosed","is24Hours","humanReadableHoursRange","StoreLocation","every","hour","schedule","objectAt","pushObject","Store","storeLocations","place","_this4","gateways","_this5","Network","_getPaymentGateways","_getStoreLocations","_getStores","_getResourceCollection","ResourceClass","resources","_args","getResourceCollection","_args3","DeliveryServiceQuote","_ServiceQuote","_getFromCart","_fetchServiceQuotesFromCart","Adapter","_possibleConstructorReturn","origin","destination","cart","_origin","_destination","_cart","config","all","serviceQuotes","serviceQuote","_x3","quote","fetchServiceQuotesFromCart","_x4","_x5","_x6","_x7","ServiceQuote","checkoutActions","initialize","customer","gateway","orderOptions","isResource","captureOrder","transactionDetails","orderJson","Checkout","_this$store","_this$store2","adapters","BrowserAdapter","NodeAdapter","Resolver","lookup","className","pluralize","singularize","_construct","_toConsumableArray","_Store","extendStoreActions","json","classify","Storefront","storeKey","debug","version","host","publicKey","startsWith","isNodeEnvironment","detectAdapter","categories","extendActions","customers","checkout","product"],"mappings":"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","x_google_ignoreList":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]}